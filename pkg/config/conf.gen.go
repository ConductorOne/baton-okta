// Code generated by baton-sdk. DO NOT EDIT!!!
package config

import "reflect" 

type Okta struct {
	Domain string `mapstructure:"domain"`
	ApiToken string `mapstructure:"api-token"`
	OktaClientId string `mapstructure:"okta-client-id"`
	OktaPrivateKey string `mapstructure:"okta-private-key"`
	OktaPrivateKeyId string `mapstructure:"okta-private-key-id"`
	SyncInactiveApps bool `mapstructure:"sync-inactive-apps"`
	OktaProvisioning bool `mapstructure:"okta-provisioning"`
	Ciam bool `mapstructure:"ciam"`
	CiamEmailDomains []string `mapstructure:"ciam-email-domains"`
	Cache bool `mapstructure:"cache"`
	CacheTTI int `mapstructure:"cache-tti"`
	CacheTTL int `mapstructure:"cache-ttl"`
	SyncCustomRoles bool `mapstructure:"sync-custom-roles"`
	SkipSecondaryEmails bool `mapstructure:"skip-secondary-emails"`
	AWSMode bool `mapstructure:"aws-identity-center-mode"`
	AwsOktaAppId string `mapstructure:"aws-okta-app-id"`
	SyncSecrets bool `mapstructure:"sync-secrets"`
}

func (c* Okta) findFieldByTag(tagValue string) (any, bool) {
	v := reflect.ValueOf(c).Elem() // Dereference pointer to struct
	t := v.Type()

	for i := 0; i < t.NumField(); i++ {
		field := t.Field(i)
		tag := field.Tag.Get("mapstructure")

		if tag == tagValue {
			return v.Field(i).Interface(), true
		}
	}
	return nil, false
}

func (c *Okta) GetStringSlice(fieldName string) []string {
	v, ok := c.findFieldByTag(fieldName)
	if !ok {
		return []string{}
	}
	t, ok := v.([]string)
	if !ok {
		panic("wrong type")
	}
	return t
}

func (c *Okta) GetString(fieldName string) string {
	v, ok := c.findFieldByTag(fieldName)
	if !ok {
		return ""
	}
	t, ok := v.(string)
	if !ok {
		panic("wrong type")
	}
	return t
}

func (c *Okta) GetInt(fieldName string) int {
	v, ok := c.findFieldByTag(fieldName)
	if !ok {
		return 0
	}
	t, ok := v.(int)
	if !ok {
		panic("wrong type")
	}
	return t
}

func (c *Okta) GetBool(fieldName string) bool {
	v, ok := c.findFieldByTag(fieldName)
	if !ok {
		return false
	}
	t, ok := v.(bool)
	if !ok {
		panic("wrong type")
	}
	return t
}

func (c *Okta) GetStringMap(fieldName string) map[string]any {
	v, ok := c.findFieldByTag(fieldName)
	if !ok {
		return map[string]any{}
	}
	t, ok := v.(map[string]any)
	if !ok {
		panic("wrong type")
	}
	return t
}
