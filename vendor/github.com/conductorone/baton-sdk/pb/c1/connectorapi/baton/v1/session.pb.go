// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: c1/connectorapi/baton/v1/session.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BatonServiceGetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SyncId        string                 `protobuf:"bytes,1,opt,name=sync_id,json=syncId,proto3" json:"sync_id,omitempty"`
	Key           string                 `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatonServiceGetRequest) Reset() {
	*x = BatonServiceGetRequest{}
	mi := &file_c1_connectorapi_baton_v1_session_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatonServiceGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatonServiceGetRequest) ProtoMessage() {}

func (x *BatonServiceGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_c1_connectorapi_baton_v1_session_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatonServiceGetRequest.ProtoReflect.Descriptor instead.
func (*BatonServiceGetRequest) Descriptor() ([]byte, []int) {
	return file_c1_connectorapi_baton_v1_session_proto_rawDescGZIP(), []int{0}
}

func (x *BatonServiceGetRequest) GetSyncId() string {
	if x != nil {
		return x.SyncId
	}
	return ""
}

func (x *BatonServiceGetRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type BatonServiceGetResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         []byte                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatonServiceGetResponse) Reset() {
	*x = BatonServiceGetResponse{}
	mi := &file_c1_connectorapi_baton_v1_session_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatonServiceGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatonServiceGetResponse) ProtoMessage() {}

func (x *BatonServiceGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_c1_connectorapi_baton_v1_session_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatonServiceGetResponse.ProtoReflect.Descriptor instead.
func (*BatonServiceGetResponse) Descriptor() ([]byte, []int) {
	return file_c1_connectorapi_baton_v1_session_proto_rawDescGZIP(), []int{1}
}

func (x *BatonServiceGetResponse) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type BatonServiceGetManyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SyncId        string                 `protobuf:"bytes,1,opt,name=sync_id,json=syncId,proto3" json:"sync_id,omitempty"`
	Keys          []string               `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatonServiceGetManyRequest) Reset() {
	*x = BatonServiceGetManyRequest{}
	mi := &file_c1_connectorapi_baton_v1_session_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatonServiceGetManyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatonServiceGetManyRequest) ProtoMessage() {}

func (x *BatonServiceGetManyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_c1_connectorapi_baton_v1_session_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatonServiceGetManyRequest.ProtoReflect.Descriptor instead.
func (*BatonServiceGetManyRequest) Descriptor() ([]byte, []int) {
	return file_c1_connectorapi_baton_v1_session_proto_rawDescGZIP(), []int{2}
}

func (x *BatonServiceGetManyRequest) GetSyncId() string {
	if x != nil {
		return x.SyncId
	}
	return ""
}

func (x *BatonServiceGetManyRequest) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

type BatonServiceGetManyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        map[string][]byte      `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatonServiceGetManyResponse) Reset() {
	*x = BatonServiceGetManyResponse{}
	mi := &file_c1_connectorapi_baton_v1_session_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatonServiceGetManyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatonServiceGetManyResponse) ProtoMessage() {}

func (x *BatonServiceGetManyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_c1_connectorapi_baton_v1_session_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatonServiceGetManyResponse.ProtoReflect.Descriptor instead.
func (*BatonServiceGetManyResponse) Descriptor() ([]byte, []int) {
	return file_c1_connectorapi_baton_v1_session_proto_rawDescGZIP(), []int{3}
}

func (x *BatonServiceGetManyResponse) GetValues() map[string][]byte {
	if x != nil {
		return x.Values
	}
	return nil
}

type BatonServiceGetAllRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SyncId        string                 `protobuf:"bytes,1,opt,name=sync_id,json=syncId,proto3" json:"sync_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatonServiceGetAllRequest) Reset() {
	*x = BatonServiceGetAllRequest{}
	mi := &file_c1_connectorapi_baton_v1_session_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatonServiceGetAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatonServiceGetAllRequest) ProtoMessage() {}

func (x *BatonServiceGetAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_c1_connectorapi_baton_v1_session_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatonServiceGetAllRequest.ProtoReflect.Descriptor instead.
func (*BatonServiceGetAllRequest) Descriptor() ([]byte, []int) {
	return file_c1_connectorapi_baton_v1_session_proto_rawDescGZIP(), []int{4}
}

func (x *BatonServiceGetAllRequest) GetSyncId() string {
	if x != nil {
		return x.SyncId
	}
	return ""
}

type BatonServiceSetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SyncId        string                 `protobuf:"bytes,1,opt,name=sync_id,json=syncId,proto3" json:"sync_id,omitempty"`
	Key           string                 `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value         []byte                 `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatonServiceSetRequest) Reset() {
	*x = BatonServiceSetRequest{}
	mi := &file_c1_connectorapi_baton_v1_session_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatonServiceSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatonServiceSetRequest) ProtoMessage() {}

func (x *BatonServiceSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_c1_connectorapi_baton_v1_session_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatonServiceSetRequest.ProtoReflect.Descriptor instead.
func (*BatonServiceSetRequest) Descriptor() ([]byte, []int) {
	return file_c1_connectorapi_baton_v1_session_proto_rawDescGZIP(), []int{5}
}

func (x *BatonServiceSetRequest) GetSyncId() string {
	if x != nil {
		return x.SyncId
	}
	return ""
}

func (x *BatonServiceSetRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *BatonServiceSetRequest) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type BatonServiceSetResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatonServiceSetResponse) Reset() {
	*x = BatonServiceSetResponse{}
	mi := &file_c1_connectorapi_baton_v1_session_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatonServiceSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatonServiceSetResponse) ProtoMessage() {}

func (x *BatonServiceSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_c1_connectorapi_baton_v1_session_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatonServiceSetResponse.ProtoReflect.Descriptor instead.
func (*BatonServiceSetResponse) Descriptor() ([]byte, []int) {
	return file_c1_connectorapi_baton_v1_session_proto_rawDescGZIP(), []int{6}
}

type BatonServiceSetManyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SyncId        string                 `protobuf:"bytes,1,opt,name=sync_id,json=syncId,proto3" json:"sync_id,omitempty"`
	Values        map[string][]byte      `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatonServiceSetManyRequest) Reset() {
	*x = BatonServiceSetManyRequest{}
	mi := &file_c1_connectorapi_baton_v1_session_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatonServiceSetManyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatonServiceSetManyRequest) ProtoMessage() {}

func (x *BatonServiceSetManyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_c1_connectorapi_baton_v1_session_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatonServiceSetManyRequest.ProtoReflect.Descriptor instead.
func (*BatonServiceSetManyRequest) Descriptor() ([]byte, []int) {
	return file_c1_connectorapi_baton_v1_session_proto_rawDescGZIP(), []int{7}
}

func (x *BatonServiceSetManyRequest) GetSyncId() string {
	if x != nil {
		return x.SyncId
	}
	return ""
}

func (x *BatonServiceSetManyRequest) GetValues() map[string][]byte {
	if x != nil {
		return x.Values
	}
	return nil
}

type BatonServiceSetManyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatonServiceSetManyResponse) Reset() {
	*x = BatonServiceSetManyResponse{}
	mi := &file_c1_connectorapi_baton_v1_session_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatonServiceSetManyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatonServiceSetManyResponse) ProtoMessage() {}

func (x *BatonServiceSetManyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_c1_connectorapi_baton_v1_session_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatonServiceSetManyResponse.ProtoReflect.Descriptor instead.
func (*BatonServiceSetManyResponse) Descriptor() ([]byte, []int) {
	return file_c1_connectorapi_baton_v1_session_proto_rawDescGZIP(), []int{8}
}

type BatonServiceDeleteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SyncId        string                 `protobuf:"bytes,1,opt,name=sync_id,json=syncId,proto3" json:"sync_id,omitempty"`
	Key           string                 `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatonServiceDeleteRequest) Reset() {
	*x = BatonServiceDeleteRequest{}
	mi := &file_c1_connectorapi_baton_v1_session_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatonServiceDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatonServiceDeleteRequest) ProtoMessage() {}

func (x *BatonServiceDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_c1_connectorapi_baton_v1_session_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatonServiceDeleteRequest.ProtoReflect.Descriptor instead.
func (*BatonServiceDeleteRequest) Descriptor() ([]byte, []int) {
	return file_c1_connectorapi_baton_v1_session_proto_rawDescGZIP(), []int{9}
}

func (x *BatonServiceDeleteRequest) GetSyncId() string {
	if x != nil {
		return x.SyncId
	}
	return ""
}

func (x *BatonServiceDeleteRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type BatonServiceDeleteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatonServiceDeleteResponse) Reset() {
	*x = BatonServiceDeleteResponse{}
	mi := &file_c1_connectorapi_baton_v1_session_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatonServiceDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatonServiceDeleteResponse) ProtoMessage() {}

func (x *BatonServiceDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_c1_connectorapi_baton_v1_session_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatonServiceDeleteResponse.ProtoReflect.Descriptor instead.
func (*BatonServiceDeleteResponse) Descriptor() ([]byte, []int) {
	return file_c1_connectorapi_baton_v1_session_proto_rawDescGZIP(), []int{10}
}

type BatonServiceDeleteManyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SyncId        string                 `protobuf:"bytes,1,opt,name=sync_id,json=syncId,proto3" json:"sync_id,omitempty"`
	Keys          []string               `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatonServiceDeleteManyRequest) Reset() {
	*x = BatonServiceDeleteManyRequest{}
	mi := &file_c1_connectorapi_baton_v1_session_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatonServiceDeleteManyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatonServiceDeleteManyRequest) ProtoMessage() {}

func (x *BatonServiceDeleteManyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_c1_connectorapi_baton_v1_session_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatonServiceDeleteManyRequest.ProtoReflect.Descriptor instead.
func (*BatonServiceDeleteManyRequest) Descriptor() ([]byte, []int) {
	return file_c1_connectorapi_baton_v1_session_proto_rawDescGZIP(), []int{11}
}

func (x *BatonServiceDeleteManyRequest) GetSyncId() string {
	if x != nil {
		return x.SyncId
	}
	return ""
}

func (x *BatonServiceDeleteManyRequest) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

type BatonServiceDeleteManyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatonServiceDeleteManyResponse) Reset() {
	*x = BatonServiceDeleteManyResponse{}
	mi := &file_c1_connectorapi_baton_v1_session_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatonServiceDeleteManyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatonServiceDeleteManyResponse) ProtoMessage() {}

func (x *BatonServiceDeleteManyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_c1_connectorapi_baton_v1_session_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatonServiceDeleteManyResponse.ProtoReflect.Descriptor instead.
func (*BatonServiceDeleteManyResponse) Descriptor() ([]byte, []int) {
	return file_c1_connectorapi_baton_v1_session_proto_rawDescGZIP(), []int{12}
}

type BatonServiceClearRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SyncId        string                 `protobuf:"bytes,1,opt,name=sync_id,json=syncId,proto3" json:"sync_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatonServiceClearRequest) Reset() {
	*x = BatonServiceClearRequest{}
	mi := &file_c1_connectorapi_baton_v1_session_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatonServiceClearRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatonServiceClearRequest) ProtoMessage() {}

func (x *BatonServiceClearRequest) ProtoReflect() protoreflect.Message {
	mi := &file_c1_connectorapi_baton_v1_session_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatonServiceClearRequest.ProtoReflect.Descriptor instead.
func (*BatonServiceClearRequest) Descriptor() ([]byte, []int) {
	return file_c1_connectorapi_baton_v1_session_proto_rawDescGZIP(), []int{13}
}

func (x *BatonServiceClearRequest) GetSyncId() string {
	if x != nil {
		return x.SyncId
	}
	return ""
}

type BatonServiceClearResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatonServiceClearResponse) Reset() {
	*x = BatonServiceClearResponse{}
	mi := &file_c1_connectorapi_baton_v1_session_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatonServiceClearResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatonServiceClearResponse) ProtoMessage() {}

func (x *BatonServiceClearResponse) ProtoReflect() protoreflect.Message {
	mi := &file_c1_connectorapi_baton_v1_session_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatonServiceClearResponse.ProtoReflect.Descriptor instead.
func (*BatonServiceClearResponse) Descriptor() ([]byte, []int) {
	return file_c1_connectorapi_baton_v1_session_proto_rawDescGZIP(), []int{14}
}

var File_c1_connectorapi_baton_v1_session_proto protoreflect.FileDescriptor

var file_c1_connectorapi_baton_v1_session_proto_rawDesc = string([]byte{
	0x0a, 0x26, 0x63, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x61, 0x70,
	0x69, 0x2f, 0x62, 0x61, 0x74, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x63, 0x31, 0x2e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x69, 0x0a, 0x16, 0x42,
	0x61, 0x74, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xfa, 0x42, 0x15, 0x72, 0x13, 0x32, 0x11, 0x5e,
	0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x32, 0x37, 0x7d, 0x24,
	0x52, 0x06, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80,
	0x02, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x2f, 0x0a, 0x17, 0x42, 0x61, 0x74, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x7b, 0x0a, 0x1a, 0x42, 0x61, 0x74, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xfa, 0x42, 0x15, 0x72, 0x13, 0x32, 0x11, 0x5e,
	0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x32, 0x37, 0x7d, 0x24,
	0x52, 0x06, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x16, 0xfa, 0x42, 0x13, 0x92, 0x01, 0x10, 0x08, 0x01,
	0x10, 0xc8, 0x01, 0x18, 0x01, 0x22, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x02, 0x52, 0x04,
	0x6b, 0x65, 0x79, 0x73, 0x22, 0xce, 0x01, 0x0a, 0x1b, 0x42, 0x61, 0x74, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x74, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x19, 0xfa, 0x42, 0x16, 0x9a, 0x01, 0x13, 0x22,
	0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x02, 0x2a, 0x08, 0x7a, 0x06, 0x10, 0x01, 0x18, 0x80,
	0x80, 0x40, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4e, 0x0a, 0x19, 0x42, 0x61, 0x74, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x18, 0xfa, 0x42, 0x15, 0x72, 0x13, 0x32, 0x11, 0x5e, 0x5b, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x32, 0x37, 0x7d, 0x24, 0x52, 0x06, 0x73,
	0x79, 0x6e, 0x63, 0x49, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x16, 0x42, 0x61, 0x74, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x31, 0x0a, 0x07, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x18, 0xfa, 0x42, 0x15, 0x72, 0x13, 0x32, 0x11, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41,
	0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x32, 0x37, 0x7d, 0x24, 0x52, 0x06, 0x73, 0x79, 0x6e,
	0x63, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x02, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x42, 0x0b, 0xfa, 0x42, 0x08, 0x7a, 0x06, 0x10, 0x01, 0x18, 0x80, 0x80, 0x40, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x42, 0x61, 0x74, 0x6f, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xff, 0x01, 0x0a, 0x1a, 0x42, 0x61, 0x74, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x07, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x18, 0xfa, 0x42, 0x15, 0x72, 0x13, 0x32, 0x11, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a,
	0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x32, 0x37, 0x7d, 0x24, 0x52, 0x06, 0x73, 0x79, 0x6e, 0x63, 0x49,
	0x64, 0x12, 0x73, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x63, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x19, 0xfa, 0x42, 0x16, 0x9a, 0x01, 0x13, 0x22, 0x07, 0x72, 0x05, 0x10,
	0x01, 0x18, 0x80, 0x02, 0x2a, 0x08, 0x7a, 0x06, 0x10, 0x01, 0x18, 0x80, 0x80, 0x40, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x1d, 0x0a, 0x1b, 0x42, 0x61, 0x74, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x6c, 0x0a, 0x19, 0x42, 0x61, 0x74, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a,
	0x07, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18,
	0xfa, 0x42, 0x15, 0x72, 0x13, 0x32, 0x11, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30,
	0x2d, 0x39, 0x5d, 0x7b, 0x32, 0x37, 0x7d, 0x24, 0x52, 0x06, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa,
	0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x02, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x1c,
	0x0a, 0x1a, 0x42, 0x61, 0x74, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7c, 0x0a, 0x1d,
	0x42, 0x61, 0x74, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a,
	0x07, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18,
	0xfa, 0x42, 0x15, 0x72, 0x13, 0x32, 0x11, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30,
	0x2d, 0x39, 0x5d, 0x7b, 0x32, 0x37, 0x7d, 0x24, 0x52, 0x06, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x14,
	0xfa, 0x42, 0x11, 0x92, 0x01, 0x0e, 0x08, 0x01, 0x10, 0xc8, 0x01, 0x22, 0x07, 0x72, 0x05, 0x10,
	0x01, 0x18, 0x80, 0x02, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x20, 0x0a, 0x1e, 0x42, 0x61,
	0x74, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0x0a, 0x18,
	0x42, 0x61, 0x74, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xfa, 0x42, 0x15, 0x72, 0x13,
	0x32, 0x11, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x32,
	0x37, 0x7d, 0x24, 0x52, 0x06, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x42,
	0x61, 0x74, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xd4, 0x06, 0x0a, 0x13, 0x42, 0x61, 0x74,
	0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x6c, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x30, 0x2e, 0x63, 0x31, 0x2e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x63, 0x31, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x78,
	0x0a, 0x07, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x79, 0x12, 0x34, 0x2e, 0x63, 0x31, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x35, 0x2e, 0x63, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x61, 0x70,
	0x69, 0x2e, 0x62, 0x61, 0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12,
	0x30, 0x2e, 0x63, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x61, 0x70,
	0x69, 0x2e, 0x62, 0x61, 0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x63, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x6e,
	0x79, 0x12, 0x34, 0x2e, 0x63, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x31, 0x2e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x65, 0x74, 0x4d, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x75, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x33, 0x2e, 0x63, 0x31, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x34, 0x2e, 0x63, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x61, 0x70,
	0x69, 0x2e, 0x62, 0x61, 0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x61, 0x6e, 0x79, 0x12, 0x37, 0x2e, 0x63, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x74, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x38, 0x2e, 0x63, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x61, 0x70,
	0x69, 0x2e, 0x62, 0x61, 0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x6e,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x05, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x12, 0x32, 0x2e, 0x63, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x74, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x31, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x75,
	0x63, 0x74, 0x6f, 0x6e, 0x65, 0x2f, 0x63, 0x31, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0x2f,
	0x63, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x61, 0x70, 0x69, 0x2f,
	0x62, 0x61, 0x74, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_c1_connectorapi_baton_v1_session_proto_rawDescOnce sync.Once
	file_c1_connectorapi_baton_v1_session_proto_rawDescData []byte
)

func file_c1_connectorapi_baton_v1_session_proto_rawDescGZIP() []byte {
	file_c1_connectorapi_baton_v1_session_proto_rawDescOnce.Do(func() {
		file_c1_connectorapi_baton_v1_session_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_c1_connectorapi_baton_v1_session_proto_rawDesc), len(file_c1_connectorapi_baton_v1_session_proto_rawDesc)))
	})
	return file_c1_connectorapi_baton_v1_session_proto_rawDescData
}

var file_c1_connectorapi_baton_v1_session_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_c1_connectorapi_baton_v1_session_proto_goTypes = []any{
	(*BatonServiceGetRequest)(nil),         // 0: c1.connectorapi.baton.v1.BatonServiceGetRequest
	(*BatonServiceGetResponse)(nil),        // 1: c1.connectorapi.baton.v1.BatonServiceGetResponse
	(*BatonServiceGetManyRequest)(nil),     // 2: c1.connectorapi.baton.v1.BatonServiceGetManyRequest
	(*BatonServiceGetManyResponse)(nil),    // 3: c1.connectorapi.baton.v1.BatonServiceGetManyResponse
	(*BatonServiceGetAllRequest)(nil),      // 4: c1.connectorapi.baton.v1.BatonServiceGetAllRequest
	(*BatonServiceSetRequest)(nil),         // 5: c1.connectorapi.baton.v1.BatonServiceSetRequest
	(*BatonServiceSetResponse)(nil),        // 6: c1.connectorapi.baton.v1.BatonServiceSetResponse
	(*BatonServiceSetManyRequest)(nil),     // 7: c1.connectorapi.baton.v1.BatonServiceSetManyRequest
	(*BatonServiceSetManyResponse)(nil),    // 8: c1.connectorapi.baton.v1.BatonServiceSetManyResponse
	(*BatonServiceDeleteRequest)(nil),      // 9: c1.connectorapi.baton.v1.BatonServiceDeleteRequest
	(*BatonServiceDeleteResponse)(nil),     // 10: c1.connectorapi.baton.v1.BatonServiceDeleteResponse
	(*BatonServiceDeleteManyRequest)(nil),  // 11: c1.connectorapi.baton.v1.BatonServiceDeleteManyRequest
	(*BatonServiceDeleteManyResponse)(nil), // 12: c1.connectorapi.baton.v1.BatonServiceDeleteManyResponse
	(*BatonServiceClearRequest)(nil),       // 13: c1.connectorapi.baton.v1.BatonServiceClearRequest
	(*BatonServiceClearResponse)(nil),      // 14: c1.connectorapi.baton.v1.BatonServiceClearResponse
	nil,                                    // 15: c1.connectorapi.baton.v1.BatonServiceGetManyResponse.ValuesEntry
	nil,                                    // 16: c1.connectorapi.baton.v1.BatonServiceSetManyRequest.ValuesEntry
}
var file_c1_connectorapi_baton_v1_session_proto_depIdxs = []int32{
	15, // 0: c1.connectorapi.baton.v1.BatonServiceGetManyResponse.values:type_name -> c1.connectorapi.baton.v1.BatonServiceGetManyResponse.ValuesEntry
	16, // 1: c1.connectorapi.baton.v1.BatonServiceSetManyRequest.values:type_name -> c1.connectorapi.baton.v1.BatonServiceSetManyRequest.ValuesEntry
	0,  // 2: c1.connectorapi.baton.v1.BatonSessionService.Get:input_type -> c1.connectorapi.baton.v1.BatonServiceGetRequest
	2,  // 3: c1.connectorapi.baton.v1.BatonSessionService.GetMany:input_type -> c1.connectorapi.baton.v1.BatonServiceGetManyRequest
	5,  // 4: c1.connectorapi.baton.v1.BatonSessionService.Set:input_type -> c1.connectorapi.baton.v1.BatonServiceSetRequest
	7,  // 5: c1.connectorapi.baton.v1.BatonSessionService.SetMany:input_type -> c1.connectorapi.baton.v1.BatonServiceSetManyRequest
	9,  // 6: c1.connectorapi.baton.v1.BatonSessionService.Delete:input_type -> c1.connectorapi.baton.v1.BatonServiceDeleteRequest
	11, // 7: c1.connectorapi.baton.v1.BatonSessionService.DeleteMany:input_type -> c1.connectorapi.baton.v1.BatonServiceDeleteManyRequest
	13, // 8: c1.connectorapi.baton.v1.BatonSessionService.Clear:input_type -> c1.connectorapi.baton.v1.BatonServiceClearRequest
	1,  // 9: c1.connectorapi.baton.v1.BatonSessionService.Get:output_type -> c1.connectorapi.baton.v1.BatonServiceGetResponse
	3,  // 10: c1.connectorapi.baton.v1.BatonSessionService.GetMany:output_type -> c1.connectorapi.baton.v1.BatonServiceGetManyResponse
	6,  // 11: c1.connectorapi.baton.v1.BatonSessionService.Set:output_type -> c1.connectorapi.baton.v1.BatonServiceSetResponse
	8,  // 12: c1.connectorapi.baton.v1.BatonSessionService.SetMany:output_type -> c1.connectorapi.baton.v1.BatonServiceSetManyResponse
	10, // 13: c1.connectorapi.baton.v1.BatonSessionService.Delete:output_type -> c1.connectorapi.baton.v1.BatonServiceDeleteResponse
	12, // 14: c1.connectorapi.baton.v1.BatonSessionService.DeleteMany:output_type -> c1.connectorapi.baton.v1.BatonServiceDeleteManyResponse
	14, // 15: c1.connectorapi.baton.v1.BatonSessionService.Clear:output_type -> c1.connectorapi.baton.v1.BatonServiceClearResponse
	9,  // [9:16] is the sub-list for method output_type
	2,  // [2:9] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_c1_connectorapi_baton_v1_session_proto_init() }
func file_c1_connectorapi_baton_v1_session_proto_init() {
	if File_c1_connectorapi_baton_v1_session_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_c1_connectorapi_baton_v1_session_proto_rawDesc), len(file_c1_connectorapi_baton_v1_session_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_c1_connectorapi_baton_v1_session_proto_goTypes,
		DependencyIndexes: file_c1_connectorapi_baton_v1_session_proto_depIdxs,
		MessageInfos:      file_c1_connectorapi_baton_v1_session_proto_msgTypes,
	}.Build()
	File_c1_connectorapi_baton_v1_session_proto = out.File
	file_c1_connectorapi_baton_v1_session_proto_goTypes = nil
	file_c1_connectorapi_baton_v1_session_proto_depIdxs = nil
}
