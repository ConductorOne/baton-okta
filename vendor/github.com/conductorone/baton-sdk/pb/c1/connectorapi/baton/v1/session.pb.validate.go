// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: c1/connectorapi/baton/v1/session.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on BatonServiceGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatonServiceGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatonServiceGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatonServiceGetRequestMultiError, or nil if none found.
func (m *BatonServiceGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatonServiceGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_BatonServiceGetRequest_SyncId_Pattern.MatchString(m.GetSyncId()) {
		err := BatonServiceGetRequestValidationError{
			field:  "SyncId",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]{27}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetKey()); l < 1 || l > 256 {
		err := BatonServiceGetRequestValidationError{
			field:  "Key",
			reason: "value length must be between 1 and 256 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BatonServiceGetRequestMultiError(errors)
	}

	return nil
}

// BatonServiceGetRequestMultiError is an error wrapping multiple validation
// errors returned by BatonServiceGetRequest.ValidateAll() if the designated
// constraints aren't met.
type BatonServiceGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatonServiceGetRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatonServiceGetRequestMultiError) AllErrors() []error { return m }

// BatonServiceGetRequestValidationError is the validation error returned by
// BatonServiceGetRequest.Validate if the designated constraints aren't met.
type BatonServiceGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatonServiceGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatonServiceGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatonServiceGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatonServiceGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatonServiceGetRequestValidationError) ErrorName() string {
	return "BatonServiceGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatonServiceGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatonServiceGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatonServiceGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatonServiceGetRequestValidationError{}

var _BatonServiceGetRequest_SyncId_Pattern = regexp.MustCompile("^[a-zA-Z0-9]{27}$")

// Validate checks the field values on BatonServiceGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatonServiceGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatonServiceGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatonServiceGetResponseMultiError, or nil if none found.
func (m *BatonServiceGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BatonServiceGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return BatonServiceGetResponseMultiError(errors)
	}

	return nil
}

// BatonServiceGetResponseMultiError is an error wrapping multiple validation
// errors returned by BatonServiceGetResponse.ValidateAll() if the designated
// constraints aren't met.
type BatonServiceGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatonServiceGetResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatonServiceGetResponseMultiError) AllErrors() []error { return m }

// BatonServiceGetResponseValidationError is the validation error returned by
// BatonServiceGetResponse.Validate if the designated constraints aren't met.
type BatonServiceGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatonServiceGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatonServiceGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatonServiceGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatonServiceGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatonServiceGetResponseValidationError) ErrorName() string {
	return "BatonServiceGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatonServiceGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatonServiceGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatonServiceGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatonServiceGetResponseValidationError{}

// Validate checks the field values on BatonServiceGetManyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatonServiceGetManyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatonServiceGetManyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatonServiceGetManyRequestMultiError, or nil if none found.
func (m *BatonServiceGetManyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatonServiceGetManyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_BatonServiceGetManyRequest_SyncId_Pattern.MatchString(m.GetSyncId()) {
		err := BatonServiceGetManyRequestValidationError{
			field:  "SyncId",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]{27}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := len(m.GetKeys()); l < 1 || l > 200 {
		err := BatonServiceGetManyRequestValidationError{
			field:  "Keys",
			reason: "value must contain between 1 and 200 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_BatonServiceGetManyRequest_Keys_Unique := make(map[string]struct{}, len(m.GetKeys()))

	for idx, item := range m.GetKeys() {
		_, _ = idx, item

		if _, exists := _BatonServiceGetManyRequest_Keys_Unique[item]; exists {
			err := BatonServiceGetManyRequestValidationError{
				field:  fmt.Sprintf("Keys[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_BatonServiceGetManyRequest_Keys_Unique[item] = struct{}{}
		}

		if l := utf8.RuneCountInString(item); l < 1 || l > 256 {
			err := BatonServiceGetManyRequestValidationError{
				field:  fmt.Sprintf("Keys[%v]", idx),
				reason: "value length must be between 1 and 256 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return BatonServiceGetManyRequestMultiError(errors)
	}

	return nil
}

// BatonServiceGetManyRequestMultiError is an error wrapping multiple
// validation errors returned by BatonServiceGetManyRequest.ValidateAll() if
// the designated constraints aren't met.
type BatonServiceGetManyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatonServiceGetManyRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatonServiceGetManyRequestMultiError) AllErrors() []error { return m }

// BatonServiceGetManyRequestValidationError is the validation error returned
// by BatonServiceGetManyRequest.Validate if the designated constraints aren't met.
type BatonServiceGetManyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatonServiceGetManyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatonServiceGetManyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatonServiceGetManyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatonServiceGetManyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatonServiceGetManyRequestValidationError) ErrorName() string {
	return "BatonServiceGetManyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatonServiceGetManyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatonServiceGetManyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatonServiceGetManyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatonServiceGetManyRequestValidationError{}

var _BatonServiceGetManyRequest_SyncId_Pattern = regexp.MustCompile("^[a-zA-Z0-9]{27}$")

// Validate checks the field values on BatonServiceGetManyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatonServiceGetManyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatonServiceGetManyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatonServiceGetManyResponseMultiError, or nil if none found.
func (m *BatonServiceGetManyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BatonServiceGetManyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetValues()))
		i := 0
		for key := range m.GetValues() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetValues()[key]
			_ = val

			if l := utf8.RuneCountInString(key); l < 1 || l > 256 {
				err := BatonServiceGetManyResponseValidationError{
					field:  fmt.Sprintf("Values[%v]", key),
					reason: "value length must be between 1 and 256 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if l := len(val); l < 1 || l > 1048576 {
				err := BatonServiceGetManyResponseValidationError{
					field:  fmt.Sprintf("Values[%v]", key),
					reason: "value length must be between 1 and 1048576 bytes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return BatonServiceGetManyResponseMultiError(errors)
	}

	return nil
}

// BatonServiceGetManyResponseMultiError is an error wrapping multiple
// validation errors returned by BatonServiceGetManyResponse.ValidateAll() if
// the designated constraints aren't met.
type BatonServiceGetManyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatonServiceGetManyResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatonServiceGetManyResponseMultiError) AllErrors() []error { return m }

// BatonServiceGetManyResponseValidationError is the validation error returned
// by BatonServiceGetManyResponse.Validate if the designated constraints
// aren't met.
type BatonServiceGetManyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatonServiceGetManyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatonServiceGetManyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatonServiceGetManyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatonServiceGetManyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatonServiceGetManyResponseValidationError) ErrorName() string {
	return "BatonServiceGetManyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatonServiceGetManyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatonServiceGetManyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatonServiceGetManyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatonServiceGetManyResponseValidationError{}

// Validate checks the field values on BatonServiceGetAllRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatonServiceGetAllRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatonServiceGetAllRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatonServiceGetAllRequestMultiError, or nil if none found.
func (m *BatonServiceGetAllRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatonServiceGetAllRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_BatonServiceGetAllRequest_SyncId_Pattern.MatchString(m.GetSyncId()) {
		err := BatonServiceGetAllRequestValidationError{
			field:  "SyncId",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]{27}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BatonServiceGetAllRequestMultiError(errors)
	}

	return nil
}

// BatonServiceGetAllRequestMultiError is an error wrapping multiple validation
// errors returned by BatonServiceGetAllRequest.ValidateAll() if the
// designated constraints aren't met.
type BatonServiceGetAllRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatonServiceGetAllRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatonServiceGetAllRequestMultiError) AllErrors() []error { return m }

// BatonServiceGetAllRequestValidationError is the validation error returned by
// BatonServiceGetAllRequest.Validate if the designated constraints aren't met.
type BatonServiceGetAllRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatonServiceGetAllRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatonServiceGetAllRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatonServiceGetAllRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatonServiceGetAllRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatonServiceGetAllRequestValidationError) ErrorName() string {
	return "BatonServiceGetAllRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatonServiceGetAllRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatonServiceGetAllRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatonServiceGetAllRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatonServiceGetAllRequestValidationError{}

var _BatonServiceGetAllRequest_SyncId_Pattern = regexp.MustCompile("^[a-zA-Z0-9]{27}$")

// Validate checks the field values on BatonServiceSetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatonServiceSetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatonServiceSetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatonServiceSetRequestMultiError, or nil if none found.
func (m *BatonServiceSetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatonServiceSetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_BatonServiceSetRequest_SyncId_Pattern.MatchString(m.GetSyncId()) {
		err := BatonServiceSetRequestValidationError{
			field:  "SyncId",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]{27}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetKey()); l < 1 || l > 256 {
		err := BatonServiceSetRequestValidationError{
			field:  "Key",
			reason: "value length must be between 1 and 256 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := len(m.GetValue()); l < 1 || l > 1048576 {
		err := BatonServiceSetRequestValidationError{
			field:  "Value",
			reason: "value length must be between 1 and 1048576 bytes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BatonServiceSetRequestMultiError(errors)
	}

	return nil
}

// BatonServiceSetRequestMultiError is an error wrapping multiple validation
// errors returned by BatonServiceSetRequest.ValidateAll() if the designated
// constraints aren't met.
type BatonServiceSetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatonServiceSetRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatonServiceSetRequestMultiError) AllErrors() []error { return m }

// BatonServiceSetRequestValidationError is the validation error returned by
// BatonServiceSetRequest.Validate if the designated constraints aren't met.
type BatonServiceSetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatonServiceSetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatonServiceSetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatonServiceSetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatonServiceSetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatonServiceSetRequestValidationError) ErrorName() string {
	return "BatonServiceSetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatonServiceSetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatonServiceSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatonServiceSetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatonServiceSetRequestValidationError{}

var _BatonServiceSetRequest_SyncId_Pattern = regexp.MustCompile("^[a-zA-Z0-9]{27}$")

// Validate checks the field values on BatonServiceSetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatonServiceSetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatonServiceSetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatonServiceSetResponseMultiError, or nil if none found.
func (m *BatonServiceSetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BatonServiceSetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BatonServiceSetResponseMultiError(errors)
	}

	return nil
}

// BatonServiceSetResponseMultiError is an error wrapping multiple validation
// errors returned by BatonServiceSetResponse.ValidateAll() if the designated
// constraints aren't met.
type BatonServiceSetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatonServiceSetResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatonServiceSetResponseMultiError) AllErrors() []error { return m }

// BatonServiceSetResponseValidationError is the validation error returned by
// BatonServiceSetResponse.Validate if the designated constraints aren't met.
type BatonServiceSetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatonServiceSetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatonServiceSetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatonServiceSetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatonServiceSetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatonServiceSetResponseValidationError) ErrorName() string {
	return "BatonServiceSetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatonServiceSetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatonServiceSetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatonServiceSetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatonServiceSetResponseValidationError{}

// Validate checks the field values on BatonServiceSetManyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatonServiceSetManyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatonServiceSetManyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatonServiceSetManyRequestMultiError, or nil if none found.
func (m *BatonServiceSetManyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatonServiceSetManyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_BatonServiceSetManyRequest_SyncId_Pattern.MatchString(m.GetSyncId()) {
		err := BatonServiceSetManyRequestValidationError{
			field:  "SyncId",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]{27}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	{
		sorted_keys := make([]string, len(m.GetValues()))
		i := 0
		for key := range m.GetValues() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetValues()[key]
			_ = val

			if l := utf8.RuneCountInString(key); l < 1 || l > 256 {
				err := BatonServiceSetManyRequestValidationError{
					field:  fmt.Sprintf("Values[%v]", key),
					reason: "value length must be between 1 and 256 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if l := len(val); l < 1 || l > 1048576 {
				err := BatonServiceSetManyRequestValidationError{
					field:  fmt.Sprintf("Values[%v]", key),
					reason: "value length must be between 1 and 1048576 bytes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return BatonServiceSetManyRequestMultiError(errors)
	}

	return nil
}

// BatonServiceSetManyRequestMultiError is an error wrapping multiple
// validation errors returned by BatonServiceSetManyRequest.ValidateAll() if
// the designated constraints aren't met.
type BatonServiceSetManyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatonServiceSetManyRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatonServiceSetManyRequestMultiError) AllErrors() []error { return m }

// BatonServiceSetManyRequestValidationError is the validation error returned
// by BatonServiceSetManyRequest.Validate if the designated constraints aren't met.
type BatonServiceSetManyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatonServiceSetManyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatonServiceSetManyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatonServiceSetManyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatonServiceSetManyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatonServiceSetManyRequestValidationError) ErrorName() string {
	return "BatonServiceSetManyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatonServiceSetManyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatonServiceSetManyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatonServiceSetManyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatonServiceSetManyRequestValidationError{}

var _BatonServiceSetManyRequest_SyncId_Pattern = regexp.MustCompile("^[a-zA-Z0-9]{27}$")

// Validate checks the field values on BatonServiceSetManyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatonServiceSetManyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatonServiceSetManyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatonServiceSetManyResponseMultiError, or nil if none found.
func (m *BatonServiceSetManyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BatonServiceSetManyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BatonServiceSetManyResponseMultiError(errors)
	}

	return nil
}

// BatonServiceSetManyResponseMultiError is an error wrapping multiple
// validation errors returned by BatonServiceSetManyResponse.ValidateAll() if
// the designated constraints aren't met.
type BatonServiceSetManyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatonServiceSetManyResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatonServiceSetManyResponseMultiError) AllErrors() []error { return m }

// BatonServiceSetManyResponseValidationError is the validation error returned
// by BatonServiceSetManyResponse.Validate if the designated constraints
// aren't met.
type BatonServiceSetManyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatonServiceSetManyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatonServiceSetManyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatonServiceSetManyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatonServiceSetManyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatonServiceSetManyResponseValidationError) ErrorName() string {
	return "BatonServiceSetManyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatonServiceSetManyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatonServiceSetManyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatonServiceSetManyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatonServiceSetManyResponseValidationError{}

// Validate checks the field values on BatonServiceDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatonServiceDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatonServiceDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatonServiceDeleteRequestMultiError, or nil if none found.
func (m *BatonServiceDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatonServiceDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_BatonServiceDeleteRequest_SyncId_Pattern.MatchString(m.GetSyncId()) {
		err := BatonServiceDeleteRequestValidationError{
			field:  "SyncId",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]{27}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetKey()); l < 1 || l > 256 {
		err := BatonServiceDeleteRequestValidationError{
			field:  "Key",
			reason: "value length must be between 1 and 256 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BatonServiceDeleteRequestMultiError(errors)
	}

	return nil
}

// BatonServiceDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by BatonServiceDeleteRequest.ValidateAll() if the
// designated constraints aren't met.
type BatonServiceDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatonServiceDeleteRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatonServiceDeleteRequestMultiError) AllErrors() []error { return m }

// BatonServiceDeleteRequestValidationError is the validation error returned by
// BatonServiceDeleteRequest.Validate if the designated constraints aren't met.
type BatonServiceDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatonServiceDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatonServiceDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatonServiceDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatonServiceDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatonServiceDeleteRequestValidationError) ErrorName() string {
	return "BatonServiceDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatonServiceDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatonServiceDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatonServiceDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatonServiceDeleteRequestValidationError{}

var _BatonServiceDeleteRequest_SyncId_Pattern = regexp.MustCompile("^[a-zA-Z0-9]{27}$")

// Validate checks the field values on BatonServiceDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatonServiceDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatonServiceDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatonServiceDeleteResponseMultiError, or nil if none found.
func (m *BatonServiceDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BatonServiceDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BatonServiceDeleteResponseMultiError(errors)
	}

	return nil
}

// BatonServiceDeleteResponseMultiError is an error wrapping multiple
// validation errors returned by BatonServiceDeleteResponse.ValidateAll() if
// the designated constraints aren't met.
type BatonServiceDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatonServiceDeleteResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatonServiceDeleteResponseMultiError) AllErrors() []error { return m }

// BatonServiceDeleteResponseValidationError is the validation error returned
// by BatonServiceDeleteResponse.Validate if the designated constraints aren't met.
type BatonServiceDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatonServiceDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatonServiceDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatonServiceDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatonServiceDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatonServiceDeleteResponseValidationError) ErrorName() string {
	return "BatonServiceDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatonServiceDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatonServiceDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatonServiceDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatonServiceDeleteResponseValidationError{}

// Validate checks the field values on BatonServiceDeleteManyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatonServiceDeleteManyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatonServiceDeleteManyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BatonServiceDeleteManyRequestMultiError, or nil if none found.
func (m *BatonServiceDeleteManyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatonServiceDeleteManyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_BatonServiceDeleteManyRequest_SyncId_Pattern.MatchString(m.GetSyncId()) {
		err := BatonServiceDeleteManyRequestValidationError{
			field:  "SyncId",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]{27}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := len(m.GetKeys()); l < 1 || l > 200 {
		err := BatonServiceDeleteManyRequestValidationError{
			field:  "Keys",
			reason: "value must contain between 1 and 200 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetKeys() {
		_, _ = idx, item

		if l := utf8.RuneCountInString(item); l < 1 || l > 256 {
			err := BatonServiceDeleteManyRequestValidationError{
				field:  fmt.Sprintf("Keys[%v]", idx),
				reason: "value length must be between 1 and 256 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return BatonServiceDeleteManyRequestMultiError(errors)
	}

	return nil
}

// BatonServiceDeleteManyRequestMultiError is an error wrapping multiple
// validation errors returned by BatonServiceDeleteManyRequest.ValidateAll()
// if the designated constraints aren't met.
type BatonServiceDeleteManyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatonServiceDeleteManyRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatonServiceDeleteManyRequestMultiError) AllErrors() []error { return m }

// BatonServiceDeleteManyRequestValidationError is the validation error
// returned by BatonServiceDeleteManyRequest.Validate if the designated
// constraints aren't met.
type BatonServiceDeleteManyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatonServiceDeleteManyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatonServiceDeleteManyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatonServiceDeleteManyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatonServiceDeleteManyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatonServiceDeleteManyRequestValidationError) ErrorName() string {
	return "BatonServiceDeleteManyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatonServiceDeleteManyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatonServiceDeleteManyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatonServiceDeleteManyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatonServiceDeleteManyRequestValidationError{}

var _BatonServiceDeleteManyRequest_SyncId_Pattern = regexp.MustCompile("^[a-zA-Z0-9]{27}$")

// Validate checks the field values on BatonServiceDeleteManyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatonServiceDeleteManyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatonServiceDeleteManyResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BatonServiceDeleteManyResponseMultiError, or nil if none found.
func (m *BatonServiceDeleteManyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BatonServiceDeleteManyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BatonServiceDeleteManyResponseMultiError(errors)
	}

	return nil
}

// BatonServiceDeleteManyResponseMultiError is an error wrapping multiple
// validation errors returned by BatonServiceDeleteManyResponse.ValidateAll()
// if the designated constraints aren't met.
type BatonServiceDeleteManyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatonServiceDeleteManyResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatonServiceDeleteManyResponseMultiError) AllErrors() []error { return m }

// BatonServiceDeleteManyResponseValidationError is the validation error
// returned by BatonServiceDeleteManyResponse.Validate if the designated
// constraints aren't met.
type BatonServiceDeleteManyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatonServiceDeleteManyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatonServiceDeleteManyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatonServiceDeleteManyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatonServiceDeleteManyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatonServiceDeleteManyResponseValidationError) ErrorName() string {
	return "BatonServiceDeleteManyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatonServiceDeleteManyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatonServiceDeleteManyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatonServiceDeleteManyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatonServiceDeleteManyResponseValidationError{}

// Validate checks the field values on BatonServiceClearRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatonServiceClearRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatonServiceClearRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatonServiceClearRequestMultiError, or nil if none found.
func (m *BatonServiceClearRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatonServiceClearRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_BatonServiceClearRequest_SyncId_Pattern.MatchString(m.GetSyncId()) {
		err := BatonServiceClearRequestValidationError{
			field:  "SyncId",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]{27}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BatonServiceClearRequestMultiError(errors)
	}

	return nil
}

// BatonServiceClearRequestMultiError is an error wrapping multiple validation
// errors returned by BatonServiceClearRequest.ValidateAll() if the designated
// constraints aren't met.
type BatonServiceClearRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatonServiceClearRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatonServiceClearRequestMultiError) AllErrors() []error { return m }

// BatonServiceClearRequestValidationError is the validation error returned by
// BatonServiceClearRequest.Validate if the designated constraints aren't met.
type BatonServiceClearRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatonServiceClearRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatonServiceClearRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatonServiceClearRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatonServiceClearRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatonServiceClearRequestValidationError) ErrorName() string {
	return "BatonServiceClearRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatonServiceClearRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatonServiceClearRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatonServiceClearRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatonServiceClearRequestValidationError{}

var _BatonServiceClearRequest_SyncId_Pattern = regexp.MustCompile("^[a-zA-Z0-9]{27}$")

// Validate checks the field values on BatonServiceClearResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatonServiceClearResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatonServiceClearResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatonServiceClearResponseMultiError, or nil if none found.
func (m *BatonServiceClearResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BatonServiceClearResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BatonServiceClearResponseMultiError(errors)
	}

	return nil
}

// BatonServiceClearResponseMultiError is an error wrapping multiple validation
// errors returned by BatonServiceClearResponse.ValidateAll() if the
// designated constraints aren't met.
type BatonServiceClearResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatonServiceClearResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatonServiceClearResponseMultiError) AllErrors() []error { return m }

// BatonServiceClearResponseValidationError is the validation error returned by
// BatonServiceClearResponse.Validate if the designated constraints aren't met.
type BatonServiceClearResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatonServiceClearResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatonServiceClearResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatonServiceClearResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatonServiceClearResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatonServiceClearResponseValidationError) ErrorName() string {
	return "BatonServiceClearResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatonServiceClearResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatonServiceClearResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatonServiceClearResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatonServiceClearResponseValidationError{}
